version: '3'

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: on-failure
    volumes:
      - ./.conf/nginx:/etc/nginx/conf.d
    networks:
      - backend
      - frontend
    ports:
      - "8080:8080"

  frontend:
    build: ./requirements/frontend
    container_name: frontend
    restart: on-failure
    depends_on:
      - nginx
    networks:
      - frontend
    volumes:
    - frontend_data:/app
    - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true

  authentication:
    build: ./requirements/authentication
    container_name: authentication
    volumes:
      - ./requirements/authentication/src:/app
      - secrets_vol:/run/secrets:ro
    restart: on-failure
    env_file:
      - .env/.env.web
    depends_on:
      - nginx
      - postgres
    networks:
      - backend

  pong:
    build: ./requirements/pong
    container_name: pong
    volumes:
      - ./requirements/pong:/app
    restart: on-failure
    depends_on:
      - nginx
      - postgres
    networks:
      - backend
    
  tournament:
    build: ./requirements/tournament
    container_name: tournament
    volumes:
      - ./requirements/tournament:/app
    restart: on-failure
    depends_on:
      - nginx
      - postgres
    networks:
      - backend
    
  matchmaking:
    build: ./requirements/matchmaking
    container_name: matchmaking
    volumes:
      - ./requirements/matchmaking:/app
    restart: on-failure
    depends_on:
      - nginx
      - postgres
    networks:
      - backend

  postgres:
    image: postgres:13
    container_name: postgres
    restart: on-failure
    env_file:
      - .env/.env.postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - secrets_vol:/run/secrets:ro
    networks:
      - backend
    command: # pour les logs
      - "postgres"
      - "-c"
      - "log_statement=all"
      - "-c"
      - "log_connections=on"
  
  adminer:
    image: adminer
    container_name: adminer
    restart: on-failure
    networks:
      - backend
    depends_on:
      - postgres
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    
networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  frontend_data:
    driver: local
    driver_opts:
      type: none
      device: ./requirements/frontend/data
      o: bind
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ./requirements/postgres/data
      o: bind
  secrets_vol:
    driver: local
    driver_opts:
      type: none
      device: ./.secrets
      o: bind
