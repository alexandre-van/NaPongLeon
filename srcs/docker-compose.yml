version: '3'

services:
  init_media:
    image: alpine:latest
    user: root
    volumes:
      - ./volumes/static:/source
      - media_vol:/media
      - static_vol:/static_files
    command: sh -c "chown -R 101:101 /media && chmod -R 755 /media && chmod 1755 /media && chown -R 101:101 /static_files && chmod -R 755 /static_files && chmod 1755 /static_files && cp -r /source/* /static_files/"

  nginx:
    build: ./nginx
    container_name: nginx
    depends_on:
      - init_media
    restart: on-failure
    volumes:
      - media_vol:/media
      - static_vol:/static_files
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - backend
      - frontend
    ports:
      - "8443:443"

  frontend:
    build: ./requirements/frontend
    container_name: frontend
    restart: on-failure
    env_file:
      - .env/.env.frontend
    depends_on:
      - nginx
    networks:
      - frontend
    volumes:
    - frontend_data:/app
    - /app/node_modules
    - static_vol:/app/static

  authentication:
    build: ./requirements/authentication
    container_name: authentication
    volumes:
      - ./requirements/authentication/src:/app
      - media_vol:/app/media
      - static_vol:/app/static_files
      - ./.env:/app/.env
    restart: on-failure
    secrets:
      - db_user
      - db_password
      - oauth_42_client_id
      - oauth_42_client_secret
      - gmail_app_password
      - gmail_host_user
    env_file:
      - .env/.env.web
    depends_on:
      - postgres
      - redis
    networks:
      - backend

  pong:
    build: ./requirements/pong
    container_name: pong
    volumes:
      - ./requirements/pong/src:/app
    restart: on-failure
    depends_on:
      - nginx
      - redis
    networks:
      - backend

  hagarrio:
    build: ./requirements/hagarrio
    container_name: hagarrio
    volumes:
      - ./requirements/hagarrio/src:/app
    restart: on-failure
    depends_on:
      - nginx
      - redis
    networks:
      - backend

  tournament:
    build: ./requirements/tournament
    container_name: tournament
    volumes:
      - ./requirements/tournament/src:/app
    restart: on-failure
    depends_on:
      - nginx
      - redis
    networks:
      - backend
    
  gamemanager:
    build: ./requirements/game_manager
    container_name: gamemanager
    secrets:
      - db_user
      - db_password
    volumes:
      - ./requirements/game_manager/src:/app
    restart: on-failure
    env_file:
      - .env/.env.web
    depends_on:
      - nginx
    networks:
      - backend

  redis:
    image: redis:7.4
    container_name: redis
    restart: on-failure
    volumes:
      - redis_data:/data
    networks:
      - backend

  postgres:
    image: postgres:13
    container_name: postgres
    restart: on-failure
    secrets:
      - db_user
      - db_password
    env_file:
      - .env/.env.postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/:/docker-entrypoint-initdb.d/
    networks:
      - backend
    command:
      - "postgres"
      - "-c"
      - "log_statement=all"
      - "-c"
      - "log_connections=on"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    container_name: adminer
    restart: on-failure
    networks:
      - backend
    depends_on:
      - postgres
    environment:
      - ADMINER_DEFAULT_SERVER=postgres

  ia:
    build: ./requirements/ia
    container_name: ia
    volumes:
      - ./requirements/ia/src:/app
    restart: on-failure
    depends_on:
      - nginx
    networks:
      - backend
    ports:
    - "6000:6000"
    command: python manage.py runserver 0.0.0.0:6000

  
    
networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  frontend_data:
    driver: local
    driver_opts:
      type: none
      device: ./requirements/frontend/data
      o: bind
  postgres_data:
  media_vol:
  static_vol:
  redis_data:

secrets:
  db_user:
    file: ./.secrets/db_user
  db_password:
    file: ./.secrets/db_password
  oauth_42_client_id:
    file: ./.secrets/oauth_42_client_id
  oauth_42_client_secret:
    file: ./.secrets/oauth_42_client_secret
  gmail_app_password:
    file: ./.secrets/gmail_app_password
  gmail_host_user:
    file: ./.secrets/gmail_host_user

  
