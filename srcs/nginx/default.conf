
# WebSockets connection upgrade
map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

# For non-API HTTP requests set to '/'
#map $request_uri $redirect_to_root {
  #  ~^/$ 0;
  #  ~^/static/ 0;
  #  ~^/api/ 0;
  #  ~^/sockjs-node/ 0;
  #  default 1;
  #}

#map $request_uri $should_rewrite {
#      default 1;
#        "~^/$" 0;
#        "~^/static/" 0;
#        "~^/api/" 0;
#        "~^/sockjs-node/" 0;
#    }




# Nouvelle map pour identifier les routes React vs API
map $uri $is_react_route {
    # Routes qui ne doivent pas être gérées par React
    ~^/api/           0;
    ~^/static/        0;
    ~^/ws/           0;
    ~^/adminer/      0;
    ~^/sockjs-node/  0;
    # Tout le reste est géré par React
    default          1;
}


upstream frontend {
	server frontend:3000;
}
upstream authentication {
	server authentication:8000;
}
upstream pong {
	server pong:8000;
}
upstream gamemanager {
	server gamemanager:8000;
}
upstream tournament {
	server tournament:8000;
}
upstream ia {
	server ia:8000;
}
upstream hagarrio {
  server hagarrio:8000;
}

upstream adminer {
  server adminer:8080;
}


#server {
#  listen 8080;
#  server_name localhost;
#  return 301 https://$server_name$request_uri;
#}

server {
#	listen 8080;
  listen 443 ssl;
	server_name localhost;

  ssl_certificate /etc/nginx/ssl/cert.pem;
  ssl_certificate_key /etc/nginx/ssl/key.pem;

  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  ssl_session_tickets off;
  client_max_body_size 5M;

  add_header X-Frame-Options "SAMEORIGIN";
  add_header Content-Security-Policy "frame-ancestors 'self' http://localhost:3000;";

  # Rewrites URI to '/'
  #if ($redirect_to_root = 1) {
    #rewrite ^/(.*)$ / last;
    #return 301 $scheme://$host:8080/;
    #}
  #if ($should_rewrite = 1) {
  #  rewrite ^/.* / break;
  #}

  # TODO file size max upload 5Mb

  # Frontend
	location / {
        # On définit un fichier index par défaut
        index index.html;
        
        # Configuration proxy standard
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Au lieu d'utiliser if avec proxy_pass, on utilise une variable
        error_page 404 = @react;
        recursive_error_pages on;
        
        proxy_pass http://frontend;



#    if ($request_uri !~ ^/($|api/|static/|sockjs-node/|reset-password/)) {
#      return 301 $scheme://$host:8080/;
#      try_files $uri $uri/ /index.html;
#    }
#		proxy_pass http://frontend;
#    proxy_http_version 1.1;
#    proxy_set_header Upgrade $http_upgrade;
#    proxy_set_header Connection $connection_upgrade;
#    proxy_set_header Host $host;
#    proxy_cache_bypass $http_upgrade;
#    proxy_set_header X-Real-IP $remote_addr;
#    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#    proxy_set_header X-Forwarded-Proto $scheme;
#    */
	}

  location @react {
    proxy_pass http://frontend;
    proxy_set_header Host $host;
    # ... autres headers identiques ...
  }

  # proxy for development
  location /static/ {
    proxy_pass http://frontend;
  }

  location /static/pong/ {
    proxy_pass http://pong;
  }

  location /static/hagarrio/ {
    proxy_pass http://hagarrio;
  }


  # Static files
  location /static_files/ {
    #    alias /static_vol/;
    #    proxy_pass http://frontend;
    alias /static_files/;
    error_log /var/log/nginx/static_error.log debug;
    access_log /var/log/nginx/static_access.log;
  }

  location /media/ {
    alias /media/;
    error_log /var/log/nginx/media_error.log debug;
    access_log /var/log/nginx/media_access.log;
  }

  # WebSocket support for React development server
  location /sockjs-node {
      proxy_pass http://frontend;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
  }

  location /adminer/ {
    proxy_pass http://adminer;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }
  
  location /ws/authentication/ {
    proxy_pass http://authentication;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  location /ws/pong/ {
    proxy_pass http://pong;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  location /ws/tournament/ {
    proxy_pass http://tournament;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  location /ws/matchmaking/ {
    proxy_pass http://gamemanager;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  location /ws/hagarrio/ {
    proxy_pass http://hagarrio;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }


  # Routes API with WebSocket support and added security against external http request
  location /api/ {
    # Only authorize the internal http requests
    add_header 'Access-Control-Allow-Origin' '$http_origin' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-CSRFToken' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Max-Age' 172800;
      add_header 'Content-Type' 'text/plain; charset=utf-8';
      add_header 'Content-Length' 0;
      return 204; # Message: No Content
    }
    
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $host;
    proxy_set_header Cookie $http_cookie;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    if ($http_referer = '') {
      return 301 $scheme://$host:8080/;
    }

    location /api/authentication/oauth/42/callback {
      proxy_pass http://authentication;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_set_header X-OAuth-Callback true;
    
      # Deactivate referer verification for this endpoint
      proxy_set_header Referer "";
    }

    location /api/authentication/ {
      proxy_pass http://authentication;
    }

    location /api/ia/ {
      proxy_pass http://ia;
    }

    location /api/pong/ {
      proxy_pass http://pong;
    }

    location /api/hagarrio/ {
      proxy_pass http://hagarrio;
    }

    location /api/tournament/ {
      proxy_pass http://tournament;
    }

    location /api/game_manager/create_game/ {
      proxy_pass http://gamemanager;
    }

    location /api/game_manager/get_history/ {
      proxy_pass http://gamemanager;
    }

    location /api/game_manager/get_status/ {
      proxy_pass http://gamemanager;
    }

    location /api/game_manager/get_win_rate/ {
      proxy_pass http://gamemanager;
    }
  }

}

